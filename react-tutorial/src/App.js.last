import React from 'react';
import logo from './logo.svg';
import './App.css';
import 'process';
import Sound from 'react-sound';
import PlayerControls from './PlayerControls';

class Counter extends React.Component {
  state = {count: 0}
  increment = () => this.setState(({count}) => ({count: count + 1}))
  render() {
    return <button onClick={this.increment}>{this.state.count}</button>
  }
}

class MySound extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      controlled: true,
      currentSong: 0,
      position: 0,
      volume: 100,
      playbackRate: 1,
      loop: false,
      playStatus: Sound.status.PLAYING
    };
  }

  getStatusText() {
    switch (this.state.playStatus) {
      case Sound.status.PLAYING:
        return 'playing';
      case Sound.status.PAUSED:
        return 'paused';
      case Sound.status.STOPPED:
        return 'stopped';
      default:
        return '(unknown)';
    }
  }

  handleSongSelected = (song) => {
    this.setState({ currentSong: song, position: 0 });
  }

  handleControlledComponentChange = (ev) => {
    this.setState({
      controlled: ev.target.checked,
      position: 0
    });
  }

  renderCurrentSong() {
    return (
      <p>
        Current song {this.state.currentSong.title}. Song is {this.getStatusText()}
      </p>
    );
  }

  render() {
    const { volume, playbackRate, loop } = this.state;

    return (

	<div>
		<PlayerControls
		  playStatus={this.state.playStatus}
		  loop={loop}
		  onPlay={() => this.setState({ playStatus: Sound.status.PLAYING })}
		  onPause={() => this.setState({ playStatus: Sound.status.PAUSED })}
		  onResume={() => this.setState({ playStatus: Sound.status.PLAYING })}
		  onStop={() => this.setState({ playStatus: Sound.status.STOPPED, position: 0 })}
		  onSeek={position => this.setState({ position })}
		  onVolumeUp={() => this.setState({ volume: volume >= 100 ? volume : volume + 10 })}
		  onVolumeDown={() => this.setState({ volume: volume <= 0 ? volume : volume - 10 })}
		  onPlaybackRateUp={() => this.setState({ playbackRate: playbackRate >= 4 ? playbackRate : playbackRate + 0.5 })}
		  onPlaybackRateDown={() => this.setState({ playbackRate: playbackRate <= 0.5 ? playbackRate : playbackRate - 0.5 })}
		  onToggleLoop={e => this.setState({ loop: e.target.checked })}
		  duration={this.state.currentSong ? this.state.currentSong.duration : 0}
		  position={this.state.position}
		  playbackRate={playbackRate}
        	/>
		<Sound
		      url={process.env.PUBLIC_URL + './LA_E_3549153.flac'}
		      playStatus={this.state.playStatus}
		      position={this.state.position}
		      volume={volume}
		      playbackRate={playbackRate}
		      loop={loop}
		      onLoading={({ bytesLoaded, bytesTotal }) => console.log(`${bytesLoaded / bytesTotal * 100}% loaded`)}
		      onLoad={() => console.log('Loaded')}
		      onPlaying={({ position }) => this.setState({ position })}
		      onPause={() => console.log('Paused')}
		      onResume={() => console.log('Resumed')}
		      onStop={() => console.log('Stopped')}
		      onFinishedPlaying={() => this.setState({ playStatus: Sound.status.STOPPED })}
            	/>
	</div>
    )
  }
}

function App() {

  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
	<img src={process.env.PUBLIC_URL + '/logo.svg'} className="App-logo" alt="logo" />
	<!--
	<div>
        	<audio src={process.env.PUBLIC_URL + './LA_E_3549153.flac'} controls autoPlay loop/>
      	</div>
	<div>
		<Counter />
	</div>
	-->
	<div>
		<MySound />
	</div>
      </header>
    </div>
  );
}

export default App;
